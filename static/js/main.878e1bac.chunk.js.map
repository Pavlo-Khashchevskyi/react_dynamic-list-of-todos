{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","changeUser","className","length","map","todo","classNames","completed","type","readOnly","title","userId","onClick","id","LinearProgress","BASE_URL","getTodos","url","fetch","then","res","ok","Error","status","statusText","json","getUser","a","response","user","message","CurrentUser","useState","setUser","useEffect","result","name","email","phone","App","setSelectedUserId","setTodos","query","setQuery","sortBy","setSortBy","randomArr","setRandomArr","getVisibleTodos","useMemo","newArr","filter","toLocaleLowerCase","includes","i","j","Math","floor","random","value","placeholder","onChange","event","target","defaultValue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.878e1bac.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\n\nimport { LinearProgress } from '@mui/material';\nimport classNames from 'classnames';\nimport { Todo } from '../../types';\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: number;\n  changeUser: (id: number) => void;\n};\n\nexport const TodoList: React.FC<Props>\n  = ({ todos, selectedUserId, changeUser }) => {\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        {!todos.length ? (\n          <LinearProgress />\n        ) : (\n          <main>\n            <div className=\"TodoList__list-container\">\n              <ul className=\"TodoList__list\">\n                {todos.map(todo => (\n                  <li\n                    className={classNames('TodoList__item',\n                      { 'TodoList__item--unchecked': !todo.completed },\n                      { 'TodoList__item--checked': todo.completed })}\n                    key={todo.id}\n                  >\n                    <label>\n                      <input type=\"checkbox\" readOnly />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    {todo.userId === selectedUserId ? (\n                      <button\n                        className=\"\n                          TodoList__user-button\n                          TodoList__user-button--selected\n                          button\n                        \"\n                        type=\"button\"\n                      >\n                        User&nbsp;#\n                        {todo.userId}\n                      </button>\n                    ) : (\n                      <button\n                        onClick={() => {\n                          changeUser(todo.userId);\n                        }}\n                        className=\"\n                          TodoList__user-button\n                          button\n                        \"\n                        type=\"button\"\n                      >\n                        User&nbsp;#\n                        {todo.userId}\n                      </button>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </main>\n        )}\n      </div>\n    );\n  };\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUser = async (userId: number) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`);\n    const user = await response.json();\n\n    return user;\n  } catch {\n    return new Error().message;\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api/api';\nimport { User } from '../../types';\n\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  changeUser: (id: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, changeUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const clearUser = () => {\n    setUser(null);\n    changeUser(0);\n  };\n\n  useEffect(() => {\n    getUser(userId).then(result => {\n      if (result) {\n        setUser(result);\n      } else {\n        setUser(null);\n      }\n    });\n  }, [userId]);\n\n  return (\n    <>\n      {!user ? (\n        <p>Don&apos;t have data about a user</p>\n      ) : (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {'Selected user: '}\n              {user.id}\n            </span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          <button\n            type=\"button\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\nimport { Todo } from './types';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState([]);\n\n  const [query, setQuery] = useState('');\n  const [sortBy, setSortBy] = useState('all');\n  const [randomArr, setRandomArr] = useState(false);\n\n  useEffect(() => {\n    getTodos().then(setTodos);\n  }, []);\n\n  const getVisibleTodos = useMemo(() => {\n    let newArr = todos.filter(\n      (todo: Todo) => todo.title.toLocaleLowerCase()\n        .includes(query.toLocaleLowerCase()),\n    );\n\n    if (randomArr) {\n      for (let i = newArr.length - 1; i > 0; i -= 1) {\n        const j = Math.floor(Math.random() * (i + 1));\n\n        [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n      }\n    }\n\n    switch (sortBy) {\n      case 'active':\n        newArr = newArr.filter((todo: Todo) => todo.completed === false);\n        break;\n      case 'completed':\n        newArr = newArr.filter((todo: Todo) => todo.completed === true);\n        break;\n      default:\n        break;\n    }\n\n    return newArr;\n  }, [todos, query, sortBy, randomArr]);\n\n  const changeUser = (id: number): void => {\n    setSelectedUserId(id);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <div className=\"TodoList__filters\">\n          <input\n            className=\"TodoList__filter TodoList__input\"\n            type=\"text\"\n            value={query}\n            placeholder=\"Type search todo...\"\n            onChange={(event) => {\n              setQuery(event.target.value);\n            }}\n          />\n\n          <select\n            className=\"TodoList__filter TodoList__select\"\n            defaultValue={sortBy}\n            onChange={(event) => {\n              setSortBy(event.target.value);\n              setRandomArr(false);\n            }}\n          >\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n\n          <button\n            className=\"TodoList__filter TodoList__btn\"\n            type=\"button\"\n            onClick={() => {\n              setRandomArr(!randomArr);\n            }}\n          >\n            {'Randomize '}\n            {randomArr ? 'ON' : 'OFF'}\n          </button>\n        </div>\n        <TodoList\n          selectedUserId={selectedUserId}\n          todos={getVisibleTodos}\n          changeUser={changeUser}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              changeUser={changeUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}