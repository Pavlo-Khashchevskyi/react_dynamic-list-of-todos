{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","changeUser","useState","query","setQuery","sortBy","setSortBy","randomArr","setRandomArr","getVisibleTodos","useMemo","newArr","filter","todo","title","toLocaleLowerCase","includes","i","length","j","Math","floor","random","completed","className","type","value","placeholder","onChange","event","target","defaultValue","onClick","map","classNames","readOnly","userId","id","LinearProgress","BASE_URL","getUser","a","fetch","response","json","user","Error","CurrentUser","setUser","useEffect","then","result","name","email","phone","App","setSelectedUserId","setTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d80a7157.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport './TodoList.scss';\n\nimport { LinearProgress } from '@mui/material';\nimport classNames from 'classnames';\n\ninterface Todo {\n  completed: boolean;\n  id: number;\n  createdAt: string;\n  updatedAp: string;\n  userId: number;\n  title: string;\n}\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: number;\n  changeUser: (userId: number) => void;\n};\n\nexport const TodoList: React.FC<Props>\n  = ({ todos, selectedUserId, changeUser }) => {\n    const [query, setQuery] = useState('');\n    const [sortBy, setSortBy] = useState('all');\n    const [randomArr, setRandomArr] = useState(false);\n\n    const getVisibleTodos = useMemo(() => {\n      let newArr = todos.filter(\n        todo => todo.title.toLocaleLowerCase()\n          .includes(query.toLocaleLowerCase()),\n      );\n\n      if (randomArr) {\n        for (let i = newArr.length - 1; i > 0; i -= 1) {\n          const j = Math.floor(Math.random() * (i + 1));\n\n          [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n        }\n      }\n\n      switch (sortBy) {\n        case 'active':\n          newArr = newArr.filter(todo => todo.completed === false);\n          break;\n        case 'completed':\n          newArr = newArr.filter(todo => todo.completed === true);\n          break;\n        default:\n          break;\n      }\n\n      return newArr;\n    }, [todos, query, sortBy, randomArr]);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        {!todos.length ? (\n          <LinearProgress />\n        ) : (\n          <main>\n            <div className=\"TodoList__filters\">\n              <input\n                className=\"TodoList__filter TodoList__input\"\n                type=\"text\"\n                value={query}\n                placeholder=\"Type search todo...\"\n                onChange={(event) => {\n                  setQuery(event.target.value);\n                }}\n              />\n\n              <select\n                className=\"TodoList__filter TodoList__select\"\n                defaultValue={sortBy}\n                onChange={(event) => {\n                  setSortBy(event.target.value);\n                  setRandomArr(false);\n                }}\n              >\n                <option value=\"all\">all</option>\n                <option value=\"active\">active</option>\n                <option value=\"completed\">completed</option>\n              </select>\n\n              <button\n                className=\"TodoList__filter TodoList__btn\"\n                type=\"button\"\n                onClick={() => {\n                  setRandomArr(!randomArr);\n                }}\n              >\n                {'Randomize '}\n                {randomArr ? 'ON' : 'OFF'}\n              </button>\n            </div>\n\n            <div className=\"TodoList__list-container\">\n              <ul className=\"TodoList__list\">\n                {getVisibleTodos.map(todo => (\n                  <li\n                    className={classNames('TodoList__item',\n                      { 'TodoList__item--unchecked': !todo.completed },\n                      { 'TodoList__item--checked': todo.completed })}\n                    key={todo.id}\n                  >\n                    <label>\n                      <input type=\"checkbox\" readOnly />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    {todo.userId === selectedUserId ? (\n                      <button\n                        className=\"\n                          TodoList__user-button\n                          TodoList__user-button--selected\n                          button\n                        \"\n                        type=\"button\"\n                      >\n                        User&nbsp;#\n                        {todo.userId}\n                      </button>\n                    ) : (\n                      <button\n                        onClick={() => {\n                          changeUser(todo.userId);\n                        }}\n                        className=\"\n                          TodoList__user-button\n                          button\n                        \"\n                        type=\"button\"\n                      >\n                        User&nbsp;#\n                        {todo.userId}\n                      </button>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </main>\n        )}\n      </div>\n    );\n  };\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = () => {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUser = async (userId: number) => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`);\n    const user = await response.json();\n\n    return user;\n  } catch {\n    return !Error;\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api/api';\n\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  changeUser: (id: number) => void;\n};\n\ntype User = {\n  id: number,\n  createdAt: string,\n  updatedAt: string,\n  name: string,\n  username: string,\n  email: string,\n  phone: string,\n  website: string,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, changeUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const clearUser = () => {\n    setUser(null);\n    changeUser(0);\n  };\n\n  useEffect(() => {\n    getUser(userId).then(result => {\n      if (result) {\n        setUser(result);\n      } else {\n        setUser(null);\n      }\n    });\n  }, [userId]);\n\n  return (\n    <>\n      {!user ? (\n        <p>Don&apos;t have data about a user</p>\n      ) : (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {'Selected user: '}\n              {user.id}\n            </span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          <button\n            type=\"button\"\n            onClick={() => {\n              clearUser();\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    getTodos().then(result => {\n      setTodos(result);\n    });\n  }, []);\n\n  const changeUser = (id: number): void => {\n    setSelectedUserId(id);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          changeUser={changeUser}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              changeUser={changeUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}